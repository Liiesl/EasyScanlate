name: Build and Release MangaOCRTool

# Workflow Trigger
on:
  workflow_dispatch:

  push:
    tags:
      - 'v*.*.*'

jobs:
  # --- Stage 1: Parallel Builds (jobs: build-main-app, build-minimal-module, build-updater) ---
  # ... (These jobs remain unchanged) ...

  build-main-app:
    runs-on: windows-latest
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r not_so_minimal_module.txt

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          mode: standalone
          include-data-dir: 'OCR/model=OCR/model'
          mingw64: true
          enable-plugins: pyside6
          windows-icon-from-ico: assets/app_icon.ico
          company-name: "YourCompany"
          product-name: "MangaOCRTool"
          file-description: "ManhwaOCR"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: Zip Main Build Output
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 -mf=off ..\..\main-app-build.7z *
          cd ..\..
        shell: pwsh

      - name: Upload Main Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-app-build
          path: main-app-build.7z

  build-minimal-module:
    runs-on: windows-latest
    steps:
      - name: Check-out minimal_module branch
        uses: actions/checkout@v4
        with:
          ref: minimal-module

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r minimal_module_requirements.txt

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          mode: standalone
          mingw64: true
          enable-plugins: pyside6
          windows-icon-from-ico: assets/app_icon.ico
          company-name: "YourCompany"
          product-name: "MangaOCRTool"
          file-description: "ManhwaOCR"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: Zip Minimal Build Output
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 -mf=off ..\..\minimal-module-build.7z *
          cd ..\..
        shell: pwsh

      - name: Upload Minimal Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: minimal-module-build
          path: minimal-module-build.7z

  build-updater:
    runs-on: windows-latest
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r not_so_minimal_module.txt # Assuming updater needs same deps

      - name: Build Updater Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: dev/updater/updater.py
          mode: onefile
          mingw64: true
          company-name: "YourCompany"
          product-name: "MangaOCRTool Updater"
          file-description: "Application Updater"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: List Build Output
        run: |
          echo "Listing contents of the build directory:"
          dir build
        shell: pwsh

      - name: Upload Updater Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: updater-build
          path: build/Updater.exe # Path to the one-file executable

  # --- Stage 2: Parallel Jobs for Release Assets ---
  
  create-installer:
    runs-on: windows-latest
    needs: [build-main-app, build-minimal-module, build-updater]
    permissions:
      contents: write
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts

      - name: Extract Build Artifacts
        run: |
          7z x build-artifacts/main-app-build/main-app-build.7z -o"main-app-dist"
          7z x build-artifacts/minimal-module-build/minimal-module-build.7z -o"minimal-module-dist"
        shell: pwsh

      - name: Move Updater into Main App Directory
        run: Move-Item -Path build-artifacts/updater-build/Updater.exe -Destination main-app-dist/
        shell: pwsh

      - name: Create Minimal Build and Dependency Archives
        run: |
          # Create an archive of the minimal build
          7z a -t7z -mx=9 -mf=off minimal-build.7z ./minimal-module-dist/*

          # Get the list of files to exclude (i.e., files in the minimal build)
          $minimalFiles = Get-ChildItem -Path "minimal-module-dist" -Recurse | ForEach-Object { $_.Name }
          $excludeArgs = $minimalFiles | ForEach-Object { "-xr!$_" }

          # Create an archive of the extra dependencies by excluding minimal files
          cd main-app-dist
          7z a -t7z -mx=9 -mf=off ..\dependencies.7z * $excludeArgs
          cd ..
        shell: pwsh

      - name: Install NSIS
        run: choco install nsis

      - name: Add NSIS to PATH
        run: echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Compile NSIS installer
        run: makensis dev/installer/installer.nsi

      - name: Move Installer to Root Directory
        run: Move-Item -Path dev/installer/EasyScanlate-Installer.exe -Destination .
        shell: pwsh

      - name: Upload Installer and Archives as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installer-assets
          path: |
            EasyScanlate-Installer.exe
            minimal-build.7z
            dependencies.7z

  create_update_package:
    runs-on: ubuntu-latest
    needs: build-main-app
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies for script
        run: pip install bsdiff4

      - name: Download Main App Build
        uses: actions/download-artifact@v4
        with:
          name: main-app-build
          path: main-app-build

      - name: Unzip Main App Build
        run: 7z x main-app-build/main-app-build.7z -o"current-build"

      - name: Archive Current Main Executable
        run: 7z a -t7z main-executable.7z ./current-build/main.exe

      - name: Download previous manifest and executable
        id: download_previous_assets
        run: |
          PREVIOUS_TAG="v0.1.2" # Hardcoded tag for testing
          
          gh release download $PREVIOUS_TAG --repo ${{ github.repository }} --pattern 'manifest.json' -O old_manifest.json || true
          gh release download $PREVIOUS_TAG --repo ${{ github.repository }} --pattern 'main-executable.7z' -O old_main.7z || true
          
          if [ -f "old_manifest.json" ]; then
            echo "manifest_path=old_manifest.json" >> $GITHUB_OUTPUT
          else
            echo "manifest_path=" >> $GITHUB_OUTPUT
          fi
          
          if [ -f "old_main.7z" ]; then
            7z x old_main.7z -o.
            echo "executable_path=main.exe" >> $GITHUB_OUTPUT
          else
            echo "executable_path=" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Update Package with Python Script
        id: create_package
        run: |
          ARGS=""
          if [ -n "${{ steps.download_previous_assets.outputs.manifest_path }}" ]; then
            ARGS="$ARGS --old-manifest ${{ steps.download_previous_assets.outputs.manifest_path }}"
          fi
          if [ -n "${{ steps.download_previous_assets.outputs.executable_path }}" ]; then
            ARGS="$ARGS --old-executable ${{ steps.download_previous_assets.outputs.executable_path }}"
          fi
          
          python dev/updater/create_update_package.py --build-dir current-build --main-executable-name main.exe $ARGS

      - name: Upload Update Package and New Manifest
        if: steps.create_package.outputs.package_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: update-package-assets
          path: |
            manifest.json
            update-package.zip
            *.patch
            main-executable.7z

  # --- Stage 3: Create GitHub Release ---
  
  create-release:
    runs-on: ubuntu-latest
    needs: [create-installer, create_update_package]
    permissions:
      contents: write

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      # Create the destination directory first
      - name: Create Release Directory
        run: mkdir -p release-assets

      # Download the installer assets
      - name: Download Installer Artifacts
        uses: actions/download-artifact@v4
        with:
          name: installer-assets
          path: release-assets/

      # Download the update package assets
      - name: Download Update Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: update-package-assets
          path: release-assets/

      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          preserve_order: true
          body_path: changelog.md
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}