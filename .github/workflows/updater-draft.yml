name: Build and Release MangaOCRTool

# Workflow Trigger
on:
  workflow_dispatch:

  push:
    tags:
      - 'v*.*.*'

jobs:
  # --- Stage 1: Parallel Builds ---

  build-main-app:
    runs-on: windows-latest
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r not_so_minimal_module.txt

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          mode: standalone
          include-data-dir: 'OCR/model=OCR/model'
          mingw64: true
          enable-plugins: pyside6
          windows-icon-from-ico: assets/app_icon.ico
          company-name: "YourCompany"
          product-name: "MangaOCRTool"
          file-description: "ManhwaOCR"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: Zip Main Build Output
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 ..\..\main-app-build.7z *
          cd ..\..
        shell: pwsh

      - name: Upload Main Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-app-build
          path: main-app-build.7z

  build-minimal-module:
    runs-on: windows-latest
    steps:
      - name: Check-out minimal_module branch
        uses: actions/checkout@v4
        with:
          ref: minimal-module

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r minimal_module_requirements.txt

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          mode: standalone
          mingw64: true
          enable-plugins: pyside6
          windows-icon-from-ico: assets/app_icon.ico
          company-name: "YourCompany"
          product-name: "MangaOCRTool"
          file-description: "ManhwaOCR"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: Zip Minimal Build Output
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 ..\..\minimal-module-build.7z *
          cd ..\..
        shell: pwsh

      - name: Upload Minimal Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: minimal-module-build
          path: minimal-module-build.7z

  build-updater:
    runs-on: windows-latest
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r not_so_minimal_module.txt # Assuming updater needs same deps

      - name: Build Updater Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: dev/updater/updater.py
          mode: onefile
          mingw64: true
          company-name: "YourCompany"
          product-name: "MangaOCRTool Updater"
          file-description: "Application Updater"
          file-version: "0.1.2"
          product-version: "0.1.2"

      - name: List Build Output
        run: |
          echo "Listing contents of the build directory:"
          dir build
        shell: pwsh

      - name: Upload Updater Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: updater-build
          path: build/Updater.exe # Path to the one-file executable

  # --- Stage 2: Parallel Jobs for Release Assets ---

  create-installer:
    runs-on: windows-latest
    needs: [build-main-app, build-minimal-module, build-updater]
    permissions:
      contents: write
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts

      - name: Extract Build Artifacts
        run: |
          7z x build-artifacts/main-app-build/main-app-build.7z -o"main-app-dist"
          7z x build-artifacts/minimal-module-build/minimal-module-build.7z -o"minimal-module-dist"
        shell: pwsh

      - name: Move Updater into Main App Directory
        run: Move-Item -Path build-artifacts/updater-build/Updater.exe -Destination main-app-dist/
        shell: pwsh
      
      - name: Display final directory structure for installer
        run: |
          echo "Scanning the runner's working directory..."
          dir -Recurse
        shell: pwsh

      - name: Create Minimal Build and Dependency Archives
        run: |
          # Create an archive of the minimal build
          7z a -t7z -mx=9 minimal-build.7z ./minimal-module-dist/*

          # Get the list of files to exclude (i.e., files in the minimal build)
          $minimalFiles = Get-ChildItem -Path "minimal-module-dist" -Recurse | ForEach-Object { $_.Name }
          $excludeArgs = $minimalFiles | ForEach-Object { "-xr!$_" }

          # Create an archive of the extra dependencies by excluding minimal files
          cd main-app-dist
          7z a -t7z -mx=9 ..\dependencies.7z * $excludeArgs
          cd ..
        shell: pwsh

      - name: Install NSIS
        run: choco install nsis

      - name: Add NSIS to PATH
        run: echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Compile NSIS installer
        run: makensis dev/installer/installer.nsi

      - name: Move Installer to Root Directory
        run: Move-Item -Path dev/installer/MangaOCRTool-Installer.exe -Destination .
        shell: pwsh

      - name: Upload Installer and Archives as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            MangaOCRTool-Installer.exe
            minimal-build.7z
            dependencies.7z

  create_update_package:
    runs-on: ubuntu-latest
    needs: build-main-app
    steps:
      - uses: actions/checkout@v4

      - name: Download Main App Build
        uses: actions/download-artifact@v4
        with:
          name: main-app-build
          path: main-app-build

      - name: Unzip Main App Build
        run: 7z x main-app-build/main-app-build.7z -o"current-build"

      - name: Generate Manifest for Current Build
        id: generate_manifest
        run: |
          cd current-build
          find . -type f ! -path "./torch/*" -exec sha256sum {} + | awk '{print $1 "  " $2}' | sed 's|./||' > ../manifest.json
          echo "Generated manifest.json"
          cat ../manifest.json
      
      - name: Download previous manifest
        id: download_manifest
        run: |
          if gh release download --pattern "manifest.json" -R Liiesl/EasyScanlate; then
            echo "Previous manifest downloaded successfully."
            echo "::set-output name=manifest_exists::true"
          else
            echo "No previous manifest found. A full package will be created."
            echo "::set-output name=manifest_exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Update Package
        id: create_package
        run: |
          if [[ "${{ steps.download_manifest.outputs.manifest_exists }}" == "false" ]]; then
            echo "No previous manifest. Creating a full update package."
            cd current-build
            zip -r ../update-package.zip . -x "torch/*"
            echo "::set-output name=package_created::true"
          else
            echo "Previous manifest exists. Comparing for changes."
            # The rest of your diff logic here...
            # Make sure you are in the correct directory when running diff
            # For example, if the manifest was downloaded to the root of the workspace:
            diff --new-line-format="%L" --old-line-format="" --unchanged-line-format="" current-build/manifest.json manifest.json > added_or_changed.txt
            diff --new-line-format="" --old-line-format="%L" --unchanged-line-format="" current-build/manifest.json manifest.json > removed.txt

            if [ -s "added_or_changed.txt" ] || [ -s "removed.txt" ]; then
              echo "Changes detected, creating update package."
              awk '{print $2}' added_or_changed.txt | xargs -I {} zip ../update-package.zip -C current-build {}
              echo "::set-output name=package_created::true"
            else
              echo "No file changes detected."
              echo "::set-output name=package_created::false"
            fi
          fi
      
      - name: Upload Update Package and New Manifest
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            manifest.json
            update-package.zip
        if: steps.create_package.outputs.package_created == 'true'

  # --- Stage 3: Create GitHub Release ---

  create-release:
    runs-on: ubuntu-latest
    needs: [create-installer, create_update_package]
    permissions:
      contents: write

    steps:
      - name: Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: release-assets

      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          preserve_order: true
          body_path: changelog.md
          files: |
            release-assets/MangaOCRTool-Installer.exe
            release-assets/minimal-build.7z
            release-assets/dependencies.7z
            release-assets/manifest.json
            release-assets/update-package.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}