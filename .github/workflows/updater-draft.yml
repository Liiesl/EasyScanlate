name: Build and Release MangaOCRTool

# Workflow Trigger
on:
  workflow_dispatch:

  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      # 1. Get the code from repository
      - name: Check-out repository
        uses: actions/checkout@v4

      # 2. Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project's dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128
          pip install -r requirements.txt

      # 4. Run Nuitka build
      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          mode: standalone
          include-data-dir: 'OCR/model=OCR/model'
          mingw64: true
          enable-plugins: pyside6
          windows-icon-from-ico: assets/app_icon.ico
          company-name: "YourCompany"
          product-name: "MangaOCRTool"
          file-description: "ManhwaOCR"
          file-version: "1.0.0.0"
          product-version: "1.0.0.0"

      # 5. Create a 7z archive of the PyTorch libraries with best compression
      - name: Zip PyTorch Libraries with 7-Zip
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 ..\..\pytorch-libs.7z torch
          cd ..\..
        shell: pwsh

      # Upload PyTorch 7z as a workflow artifact
      - name: Upload PyTorch Libraries as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pytorch-libs
          path: pytorch-libs.7z

      # Create a file with the list of dependencies to exclude/include
      - name: Create Dependency Exclusion List
        run: |
          @"
          OCR
          PIL
          bidi
          certifi
          charset_normalizer
          cv2
          markupsafe
          numpy
          numpy.libs
          pyclipper
          pydantic_core
          scipy
          scipy.libs
          shapely
          shapely.libs
          skimage
          torchaudio
          torchvision
          websockets
          yaml
          zstandard
          _elementtree.pyd
          _sqlite3.pyd
          _uuid.pyd
          _zoneinfo.pyd
          asmjit.dll
          cudart64_12.dll
          fbgemm.dll
          jpeg8.dll
          libsharpyuv.dll
          libwebp.dll
          nvjpeg64_12.dll
          sqlite3.dll
          "@ | Set-Content -Path "dependency-list.txt"
        shell: pwsh

      # Create a 7z archive of the dependency DLLs and folders
      - name: Zip Dependency DLLs with 7-Zip
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 ..\..\dependency-dll.7z @..\..\dependency-list.txt
          cd ..\..
        shell: pwsh

      # Upload Dependency DLLs as a workflow artifact
      - name: Upload Dependency DLLs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-dll
          path: dependency-dll.7z

      # Zip the main build output (excluding torch AND the new dependencies)
      - name: Zip Main Build Output (Without Dependencies)
        run: |
          cd build/main.dist
          7z a -t7z -mx=9 ..\..\build-output.7z * -xr!torch -x@..\..\dependency-list.txt
          cd ..\..
        shell: pwsh

      # Upload the zipped build output as an artifact
      - name: Upload Full Build Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: full-build-output
          path: build-output.7z

      # Compile the NSIS installer
      - name: Install NSIS
        run: choco install nsis
      
      - name: Add NSIS to PATH
        run: echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Compile NSIS installer
        run: makensis dev\installer\installer.nsi

      - name: Move Installer to Root Directory
        run: Move-Item -Path dev/installer/MangaOCRTool-Installer.exe -Destination .
        shell: pwsh

      # 6. Upload Installer as a workflow artifact
      - name: Upload Installer as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: MangaOCRTool-Installer.exe

      # 7. Create a DRAFT GitHub Release
      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          preserve_order: true
          body_path: changelog.md
          # Upload all three files to the release page
          files: |
            MangaOCRTool-Installer.exe
            pytorch-libs.7z
            dependency-dll.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}